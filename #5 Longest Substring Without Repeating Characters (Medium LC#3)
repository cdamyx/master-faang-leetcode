var lengthOfLongestSubstring = function(s) {
    
  if(s.length <= 1) {
    return s.length;
  }

  const seenChars = {};
  let left = 0;
  let longest = 0;

  for(let right = 0; right < s.length; right++) {  //O(n) time
    const currentChar = s[right];
    const prevSeenChar = seenChars[currentChar];
    
    if(prevSeenChar >= left) {
      left = prevSeenChar + 1;
    }
    
    seenChars[currentChar] = right;  //O(n) space
    longest = Math.max(longest, right - left + 1);
  }
  return longest;
// Time: O(n), Space: O(n)
    
    
    
//     if(s.length <= 1) {
//     return s.length;
//   }

//   let longest = 0;
  
//   for(let left = 0; left < s.length; left++) {  //O(n) time
  
//     let seenChars = {};
//     let currentLength = 0;
    
//     for(let right = left; right < s.length; right++) {  //O(n) time
//       const currentChar = s[right];
      
//       if(!seenChars[currentChar]) {
//         currentLength++;
//         seenChars[currentChar] = true;  //O(n) space
//         longest = Math.max(longest, currentLength);
//       } else {
//         break;
//       }
//     }
//   }
//   return longest;
    
//   Time: O(n^2), space: O(n)
};
