var trap = function(height) {
    let left = 0;
    let right = height.length - 1;
    let maxLeft = 0;
    let maxRight = 0;
    let totalWater = 0;
    
    
    while (left < right) {        //O(n)
        
        if (height[left] <= height[right]) {
            if (height[left] >= maxLeft) {
                maxLeft = height[left];
            } else {
                totalWater += maxLeft - height[left];
            };
            
            left++;
            
        } else {
            if (height[right] >= maxRight) {
                maxRight = height[right];
            } else {
                totalWater += maxRight - height[right];
            };
            
            right--;
        };
        
    }
    
    
    return totalWater;

};

//time: O(n)
//space: O(1)


// Original almost brute force solution

var trap = function(height) {
  let total = 0;

  for (let i = 0; i < height.length; i++) {     //O(n)
    let maxL = 0;
    let maxR = 0;
    let leftI = i;
    let rightI = i;

  while(leftI >= 0) {                           //O(n/2)
    maxL = Math.max( maxL, height[leftI]);
    leftI--;
  };

  while(rightI < height.length) {               //O(n/2)
    maxR = Math.max( maxR, height[rightI]);
    rightI++;
  };

  const currentWater = Math.min(maxL, maxR) - height[i];

  if ( currentWater >= 0 ) {
    total += currentWater;
  };

  };

  return total;

};

//time: O(n) * ( O(n/2) + O(n/2) ) = O(n^2)
//space: O(1)
